import os
import telebot
from flask import Flask, request
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
bot = telebot.TeleBot(os.environ['BOT_TOKEN'])
app = Flask(__name__)

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
CHANNEL_INVITE_LINK = "https://t.me/+87yO5xDdEUw2NWNi"

# –ö–æ–º–∞–Ω–¥–∞ /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        welcome_text = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ç—å ONIX!

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ—Ç –≤–∞—Å –≤ –∫–∞–Ω–∞–ª!
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π
        markup = telebot.types.InlineKeyboardMarkup()
        channel_btn = telebot.types.InlineKeyboardButton(
            "üì¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ ONIX", 
            url=CHANNEL_INVITE_LINK
        )
        markup.add(channel_btn)
        
        bot.send_message(
            message.chat.id, 
            welcome_text, 
            reply_markup=markup
        )
        
        logger.info(f"üì® –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
@bot.message_handler(content_types=['text', 'photo', 'video', 'document'])
def handle_all_messages(message):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (—á—Ç–æ–±—ã /start –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª—Å—è)
        if message.text and message.text.startswith('/'):
            return
            
        welcome_text = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ç—å ONIX!

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ—Ç –≤–∞—Å –≤ –∫–∞–Ω–∞–ª!
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π
        markup = telebot.types.InlineKeyboardMarkup()
        channel_btn = telebot.types.InlineKeyboardButton(
            "üì¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ ONIX", 
            url=CHANNEL_INVITE_LINK
        )
        markup.add(channel_btn)
        
        bot.send_message(
            message.chat.id, 
            welcome_text, 
            reply_markup=markup
        )
        
        logger.info(f"üì® –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_all_messages: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
@bot.chat_join_request_handler()
def approve_join_request(chat_join_request):
    try:
        user = chat_join_request.from_user
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
        bot.approve_chat_join_request(chat_join_request.chat.id, user.id)
        
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")

# Webhook –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Flask
@app.route('/')
def home():
    return "ü§ñ ONIX Network Bot is running!"

@app.route('/health')
def health_check():
    return "‚úÖ ONIX Bot is healthy and running!"

@app.route('/debug')
def debug_info():
    bot_token_set = bool(os.environ.get('BOT_TOKEN'))
    
    return f"""
üêõ ONIX Bot Debug:
‚úÖ Server: Running
ü§ñ Bot Token: {'‚úÖ SET' if bot_token_set else '‚ùå MISSING'}
üì¢ Channel Link: {CHANNEL_INVITE_LINK}
‚úÖ Auto-approve: Enabled
üîÑ Unlimited requests: Enabled
"""

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 403

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    try:
        render_url = os.environ.get('RENDER_EXTERNAL_URL', '')
        if not render_url:
            return "RENDER_EXTERNAL_URL not set"
        
        webhook_url = f"{render_url}/webhook"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        return f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ ONIX Bot starting on port {port}")
    app.run(host='0.0.0.0', port=port)
