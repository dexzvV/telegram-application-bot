import os
import telebot
from flask import Flask, request
import sqlite3
import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
bot = telebot.TeleBot(os.environ['BOT_TOKEN'])
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('applications.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS applications
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER,
                     username TEXT,
                     first_name TEXT,
                     last_name TEXT,
                     date TEXT,
                     status TEXT DEFAULT 'new')''')
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        application_btn = telebot.types.KeyboardButton('üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
        markup.add(application_btn)
        
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫. 

–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è

–ù–∏—á–µ–≥–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ - –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–¥—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@bot.message_handler(func=lambda message: message.text == 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
def handle_application(message):
    try:
        user = message.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É
        application_id = save_application(user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = f"""
‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!

–°–ø–∞—Å–∏–±–æ, {user.first_name if user.first_name else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

üïê –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}
        """
        
        bot.send_message(message.chat.id, success_text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        notify_admin(user, application_id)
        
        logger.info(f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{application_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_application: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_application(user):
    try:
        conn = sqlite3.connect('applications.db')
        c = conn.cursor()
        
        c.execute("""INSERT INTO applications 
                    (user_id, username, first_name, last_name, date) 
                    VALUES (?, ?, ?, ?, ?)""",
                (user.id, 
                 user.username, 
                 user.first_name, 
                 user.last_name,
                 datetime.datetime.now().isoformat()))
        
        application_id = c.lastrowid
        conn.commit()
        conn.close()
        
        return application_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return 0

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def notify_admin(user, application_id):
    try:
        admin_chat_id = os.environ.get('ADMIN_CHAT_ID')
        
        if not admin_chat_id:
            logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        admin_message = f"""
üöÄ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê! #{application_id}

üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name or ''} {user.last_name or ''}
üì± Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî User ID: {user.id}
üìÖ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}

–°—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è!
        """
        
        bot.send_message(admin_chat_id, admin_message)
        logger.info(f"üì¢ –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞—è–≤–∫–µ #{application_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(commands=['stats'])
def show_stats(message):
    try:
        admin_chat_id = os.environ.get('ADMIN_CHAT_ID')
        
        if str(message.chat.id) != admin_chat_id:
            return
        
        conn = sqlite3.connect('applications.db')
        c = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        c.execute("SELECT COUNT(*) FROM applications")
        total_applications = c.fetchone()[0]
        
        # –ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.datetime.now().date().isoformat()
        c.execute("SELECT COUNT(*) FROM applications WHERE date LIKE ?", (f'{today}%',))
        today_applications = c.fetchone()[0]
        
        conn.close()
        
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫

üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_applications}
üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_applications}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}
        """
        
        bot.send_message(message.chat.id, stats_text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_stats: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
@bot.message_handler(commands=['id'])
def get_chat_id(message):
    chat_id = message.chat.id
    bot.send_message(message.chat.id, f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(commands=['test'])
def test_bot(message):
    user = message.from_user
    application_id = 999  # —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
    
    # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notify_admin(user, application_id)
    bot.send_message(message.chat.id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

# Webhook –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Flask
@app.route('/')
def home():
    return "ü§ñ Telegram Application Bot is running on Render!"

@app.route('/health')
def health_check():
    return "‚úÖ Bot is healthy and running!"

@app.route('/debug')
def debug_info():
    bot_token_set = bool(os.environ.get('BOT_TOKEN'))
    admin_id_set = bool(os.environ.get('ADMIN_CHAT_ID'))
    
    return f"""
üêõ Debug Information:
‚úÖ Server: Running
üîó Webhook: https://telegram-application-bot-3p0o.onrender.com/webhook
ü§ñ Bot Token: {'‚úÖ SET' if bot_token_set else '‚ùå MISSING'}
üë§ Admin ID: {'‚úÖ SET' if admin_id_set else '‚ùå MISSING'}
"""

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 403

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
        render_url = os.environ.get('RENDER_EXTERNAL_URL', '')
        if not render_url:
            return "RENDER_EXTERNAL_URL not set"
        
        webhook_url = f"{render_url}/webhook"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        return f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == '__main__':
    init_db()
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ Starting bot on port {port}")
    app.run(host='0.0.0.0', port=port)
